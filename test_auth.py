#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ú–æ–π–°–∫–ª–∞–¥ API
"""

import requests
import base64
import os
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv('MS_TOKEN', '20c0f3c32c58bc5756718d40e16c7ec0d0522cb0')
BASE_URL = "https://api.moysklad.ru/api/remap/1.2"

def test_bearer_auth():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Bearer —Ç–æ–∫–µ–Ω"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Bearer –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    headers = {
        'Authorization': f'Bearer {TOKEN}',
        'Accept': 'application/json;charset=utf-8'
    }
    
    try:
        response = requests.get(f"{BASE_URL}/context/employee", headers=headers, timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Bearer –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_basic_auth_token_empty():
    """–¢–µ—Å—Ç Basic –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Ç–æ–∫–µ–Ω –∫–∞–∫ login, –ø–∞—Ä–æ–ª—å –ø—É—Å—Ç–æ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Basic –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (—Ç–æ–∫–µ–Ω:–ø—É—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å)...")
    credentials = base64.b64encode(f'{TOKEN}:'.encode()).decode()
    headers = {
        'Authorization': f'Basic {credentials}',
        'Accept': 'application/json;charset=utf-8'
    }
    
    try:
        response = requests.get(f"{BASE_URL}/context/employee", headers=headers, timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Basic –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Ç–æ–∫–µ–Ω:–ø—É—Å—Ç–æ–π) —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_basic_auth_token_token():
    """–¢–µ—Å—Ç Basic –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Ç–æ–∫–µ–Ω –∫–∞–∫ login –∏ password"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Basic –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (—Ç–æ–∫–µ–Ω:—Ç–æ–∫–µ–Ω)...")
    credentials = base64.b64encode(f'{TOKEN}:{TOKEN}'.encode()).decode()
    headers = {
        'Authorization': f'Basic {credentials}',
        'Accept': 'application/json;charset=utf-8'
    }
    
    try:
        response = requests.get(f"{BASE_URL}/context/employee", headers=headers, timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Basic –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Ç–æ–∫–µ–Ω:—Ç–æ–∫–µ–Ω) —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_api_token_header():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-API-TOKEN"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º X-API-TOKEN –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    headers = {
        'X-API-TOKEN': TOKEN,
        'Accept': 'application/json;charset=utf-8'
    }
    
    try:
        response = requests.get(f"{BASE_URL}/context/employee", headers=headers, timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ X-API-TOKEN –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_assortment_access(auth_method):
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É —Å —Ä–∞–±–æ—á–∏–º –º–µ—Ç–æ–¥–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É —Å –º–µ—Ç–æ–¥–æ–º {auth_method}...")
    
    if auth_method == 'bearer':
        headers = {
            'Authorization': f'Bearer {TOKEN}',
            'Accept': 'application/json;charset=utf-8'
        }
    elif auth_method == 'basic_empty':
        credentials = base64.b64encode(f'{TOKEN}:'.encode()).decode()
        headers = {
            'Authorization': f'Basic {credentials}',
            'Accept': 'application/json;charset=utf-8'
        }
    elif auth_method == 'basic_token':
        credentials = base64.b64encode(f'{TOKEN}:{TOKEN}'.encode()).decode()
        headers = {
            'Authorization': f'Basic {credentials}',
            'Accept': 'application/json;charset=utf-8'
        }
    elif auth_method == 'api_token':
        headers = {
            'X-API-TOKEN': TOKEN,
            'Accept': 'application/json;charset=utf-8'
        }
    
    try:
        url = f"{BASE_URL}/entity/assortment"
        params = {'limit': 5, 'expand': 'attributes'}
        response = requests.get(url, headers=headers, params=params, timeout=15)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            items = data.get('rows', [])
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(items)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤
            for i, item in enumerate(items[:3]):
                print(f"   üì¶ {i+1}. {item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                attrs = item.get('attributes', [])
                for attr in attrs[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –∞—Ç—Ä–∏–±—É—Ç–∞
                    print(f"      - {attr.get('name')}: {attr.get('value')}")
            
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

if __name__ == "__main__":
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {TOKEN[:10]}...")
    print(f"üìç API URL: {BASE_URL}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    methods = [
        ('bearer', test_bearer_auth),
        ('basic_empty', test_basic_auth_token_empty),
        ('basic_token', test_basic_auth_token_token),
        ('api_token', test_api_token_header)
    ]
    
    working_method = None
    
    for method_name, test_func in methods:
        if test_func():
            working_method = method_name
            break
    
    if working_method:
        print(f"\nüéâ –†–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥ –Ω–∞–π–¥–µ–Ω: {working_method}")
        test_assortment_access(working_method)
    else:
        print("\nüòû –ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
        print("   2. –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
        print("   3. –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ API")
        print("   4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        
    print(f"\nüìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –æ–±–Ω–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ app.py")