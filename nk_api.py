"""
API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º
"""
import os
from functools import cache
from typing import Tuple, Set, List, Dict
from category_mapper import choose_category
import requests
from dotenv import load_dotenv
from datetime import datetime
from config import DEFAULT_NK_CATEGORY

load_dotenv()

NC_API_KEY = os.getenv("NC_API_KEY")
BASE_URL = "https://–∞–ø–∏.–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π-–∫–∞—Ç–∞–ª–æ–≥.—Ä—Ñ"
USE_LOCAL_MAPPING_FIRST = True

# ---------------------------------------------------------------------------
# üîó  –ó–∞–ø—Ä–æ—Å—ã –∫ API
# ---------------------------------------------------------------------------

def _req(path: str, **params):
    """–ë–∞–∑–æ–≤—ã–π GET-–∑–∞–ø—Ä–æ—Å –∫ API –Ω–∞—Ü. –∫–∞—Ç–∞–ª–æ–≥–∞"""
    params.setdefault("apikey", NC_API_KEY)

    try:
        resp = requests.get(f"{BASE_URL}{path}", params=params, timeout=30)
        resp.raise_for_status()
        return resp.json().get("result")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå  –û—à–∏–±–∫–∞ API –Ω–∞—Ü. –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
    except (KeyError, ValueError) as e:
        print(f"‚ùå  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {e}")

    return None


# ---------------------------------------------------------------------------
# üìã  –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
# ---------------------------------------------------------------------------

@cache
def get_color_preset() -> Set[str]:
    """–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ü–≤–µ—Ç–æ–≤ (attr_id 36) –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"""
    try:
        attrs = _req("/v3/attributes", cat_id=30933, attr_type="a") or []
        color_attr = next((a for a in attrs if a["attr_id"] == 36), None)
        if not color_attr:
            return set()

        if color_attr.get("attr_preset"):
            return {v.upper() for v in color_attr["attr_preset"]}
        if color_attr.get("preset_url"):
            preset = _req(color_attr["preset_url"]) or []
            return {v.upper() for v in preset}

    except Exception as e:
        print(f"‚ùå  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ —Ü–≤–µ—Ç–æ–≤: {e}")

    return set()


@cache
def get_kind_preset(cat_id: int) -> Set[str]:
    """–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö ¬´–≤–∏–¥–æ–≤ —Ç–æ–≤–∞—Ä–∞¬ª (attr_id 12) –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"""
    try:
        attrs = _req("/v3/attributes", cat_id=cat_id, attr_type="a") or []
        kind_attr = next((a for a in attrs if a["attr_id"] == 12), None)
        if not kind_attr:
            return set()

        if kind_attr.get("attr_preset"):
            return {v.upper() for v in kind_attr["attr_preset"]}
        if kind_attr.get("preset_url"):
            preset = _req(kind_attr["preset_url"]) or []
            return {v.upper() for v in preset}

    except Exception as e:
        print(f"‚ùå  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_id}: {e}")

    return set()


@cache
def get_categories_by_tnved(tnved: str) -> List[Dict]:
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–¥ –¢–ù –í–≠–î"""
    try:
        print(f"\nüîç  –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¢–ù –í–≠–î {tnved}")
        # –µ—Å–ª–∏ –∫–æ–¥ 10-–∑–Ω–∞—á–Ω—ã–π ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ –≥—Ä—É–ø–ø–µ (–ø–µ—Ä–≤—ã–µ 4 —Ü–∏—Ñ—Ä—ã)
        if len(tnved) == 10:
            group_code = tnved[:4]
            cats = _req("/v3/categories", tnved=group_code) or []
            if cats:
                print(f"  ‚úÖ  –ù–∞—à–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≥—Ä—É–ø–ø–µ {group_code}")
                return cats

        cats = _req("/v3/categories", tnved=tnved) or []
        if cats:
            print("  ‚úÖ  –ù–∞—à–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –∫–æ–¥—É")
        else:
            print("  ‚ùå  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        return cats
    except Exception as e:
        print(f"‚ùå  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¢–ù –í–≠–î {tnved}: {e}")
        return []


@cache
def get_category_by_id(cat_id: int) -> Dict:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        cats = _req("/v3/categories", cat_id=cat_id) or []
        return cats[0] if cats else {}
    except Exception as e:
        print(f"‚ùå  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_id}: {e}")
        return {}


# ---------------------------------------------------------------------------
# üóÇÔ∏è  –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# ---------------------------------------------------------------------------

PRIORITY_CATEGORIES = [30933, 30717]  # –æ–¥–µ–∂–¥–∞, –æ–±—É–≤—å


def determine_category_by_product_type(tnved: str, product_type: str) -> int:
    if USE_LOCAL_MAPPING_FIRST:
        cid = choose_category(tnved, product_type)
        if cid:
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_info = get_category_by_id(cid)
            if category_info.get("category_active", True):
                return cid
            else:
                print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è {cid} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–±–æ—Ä—É —Ç–æ–ª—å–∫–æ –ø–æ –¢–ù –í–≠–î (–æ–Ω —É–∂–µ —É–º–µ–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    return determine_category_for_tnved(tnved)


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
INACTIVE_CATEGORIES = {
    30686,  # –†—É–±–∞—à–∫–∏, –±–ª—É–∑–∫–∏, –±–ª—É–∑—ã –∏ –±–ª—É–∑–æ–Ω—ã - –ù–ï–ê–ö–¢–ò–í–ù–ê
    # –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –º–µ—Ä–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
}

# –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é determine_category_for_tnved
def determine_category_for_tnved(tnved: str) -> int:
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –¢–ù –í–≠–î (–µ—Å–ª–∏ –≤–∏–¥ –Ω–µ –ø–æ–º–æ–≥)"""

    if USE_LOCAL_MAPPING_FIRST:
        cid = choose_category(tnved, None)
        if cid and cid not in INACTIVE_CATEGORIES:
            return cid
    if not tnved:
        return DEFAULT_NK_CATEGORY

    cats = get_categories_by_tnved(tnved)
    if not cats:
        return DEFAULT_NK_CATEGORY

    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    active_cats = [cat for cat in cats if cat.get("cat_id") not in INACTIVE_CATEGORIES]
    
    if not active_cats:
        print(f"‚ö†Ô∏è  –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¢–ù –í–≠–î {tnved} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã!")
        active_cats = cats  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ fallback

    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ
    for cat in active_cats:
        if cat["cat_id"] in PRIORITY_CATEGORIES and cat.get("category_active", True):
            return cat["cat_id"]

    # –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è
    for cat in active_cats:
        if cat.get("category_active", True):
            return cat["cat_id"]

    # –∏–Ω–∞—á–µ –ø–µ—Ä–≤–∞—è –≤ —Å–ø–∏—Å–∫–µ
    return active_cats[0]["cat_id"] if active_cats else DEFAULT_NK_CATEGORY


# ---------------------------------------------------------------------------
# ‚úÖ  –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
# ---------------------------------------------------------------------------

def validate_color(color_value: str) -> Tuple[bool, Set[str]]:
    if not color_value:
        return False, set()
    preset = get_color_preset()
    val = color_value.upper()
    return val in preset, preset


def validate_product_kind(kind_value: str, cat_id: int) -> Tuple[bool, Set[str]]:
    if not kind_value or not cat_id:
        return False, set()
    preset = get_kind_preset(cat_id)
    val = kind_value.upper()
    return val in preset, preset


# ---------------------------------------------------------------------------
# üì¶  –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
# ---------------------------------------------------------------------------

def create_card_data(product_data: dict, cat_id: int | None = None) -> dict:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:
      1) –¢–ù –í–≠–î + –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞
      2) –¢–ù –í–≠–î + –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
      3) —Ç–æ–ª—å–∫–æ –¢–ù –í–≠–î
      4) —Ç–æ–ª—å–∫–æ –≤–∏–¥
      5) –¥–µ—Ñ–æ–ª—Ç
    """
    if cat_id is None:
        tnved = (product_data.get("tnved") or "").strip()
        ptype = (product_data.get("product_type") or "").strip()
        name = (product_data.get("name") or "").strip().lower()
        
        print(f"\nüì¶ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è: {product_data.get('name')}")
        print(f"   –¢–ù –í–≠–î: {tnved}, –í–∏–¥ —Ç–æ–≤–∞—Ä–∞: {ptype}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –¢–ù –í–≠–î + –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞
        if tnved and ptype:
            cat_id = determine_category_by_product_type(tnved, ptype)
            if cat_id:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –≤–∏–¥—É —Ç–æ–≤–∞—Ä–∞: {cat_id}")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
        if not cat_id and tnved and name:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if "–±—Ä—é–∫–∏" in name or "–±—Ä—é–∫" in name or "—à—Ç–∞–Ω—ã" in name:
                cat_id = determine_category_by_product_type(tnved, "–±—Ä—é–∫–∏")
            elif "–ø–ª–∞—Ç—å–µ" in name:
                cat_id = determine_category_by_product_type(tnved, "–ø–ª–∞—Ç—å—è")
            elif "–±–ª—É–∑–∫–∞" in name or "–±–ª—É–∑–∞" in name:
                cat_id = determine_category_by_product_type(tnved, "–±–ª—É–∑–∫–∏")
            elif "—é–±–∫–∞" in name:
                cat_id = determine_category_by_product_type(tnved, "—é–±–∫–∏")
            elif "–∫—É—Ä—Ç–∫–∞" in name or "–∫—É—Ä—Ç–∫" in name:
                cat_id = determine_category_by_product_type(tnved, "–∫—É—Ä—Ç–∫–∏")
            elif "–¥–∂–µ–º–ø–µ—Ä" in name or "—Å–≤–∏—Ç–µ—Ä" in name:
                cat_id = determine_category_by_product_type(tnved, "–¥–∂–µ–º–ø–µ—Ä—ã")
                
        if not cat_id and tnved:
            cat_id = determine_category_for_tnved(tnved)

        if not cat_id and ptype:
            cat_id = determine_category_by_product_type("", ptype)

        if not cat_id:
            cat_id = DEFAULT_NK_CATEGORY
            print(f"   ‚û°Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é {cat_id}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –¢–ù –í–≠–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
    tnved_for_card = product_data.get("tnved", "")
    
    # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π 214943 –∏ 215009 –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π 10-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ 4 –∑–Ω–∞–∫–∞
    if cat_id not in [214943, 215009]:
        if len(tnved_for_card) > 4:
            tnved_for_card = tnved_for_card[:4]
            print(f"   üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º 4-–∑–Ω–∞—á–Ω—ã–π –¢–ù –í–≠–î –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏: {tnved_for_card}")
        else:
            print(f"   üìù –¢–ù –í–≠–î —É–∂–µ 4-–∑–Ω–∞—á–Ω—ã–π: {tnved_for_card}")
    else:
        print(f"   üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat_id} —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ª–Ω—ã–π –¢–ù –í–≠–î: {tnved_for_card}")

    # --- –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ ---------------------------------
    card: Dict = {
        "is_tech_gtin": True,          # —Ç–µ—Ö. GTIN (029‚Ä¶)
        "tnved": tnved_for_card,       # 4-–∑–Ω–∞—á–Ω—ã–π –∏–ª–∏ 10-–∑–Ω–∞—á–Ω—ã–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "brand": product_data.get("brand_nk") or "–ë—Ä–µ–Ω–¥–û–¥–µ–∂–¥—ã",
        "good_name": product_data.get("name", ""),
        "moderation": 0,               # 0 ‚Äî —á–µ—Ä–Ω–æ–≤–∏–∫
        "categories": [cat_id],
        "good_attrs": []
    }

    attrs: List[Dict] = []

    # ‚úî —Å—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    attrs.append({"attr_id": 2630, "attr_value": "RU"})

    # ‚úî –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    attrs.append({"attr_id": 2478, "attr_value": product_data.get("name", "")})

    # ‚úî —Ç–æ–≤–∞—Ä–Ω—ã–π –∑–Ω–∞–∫
    attrs.append({"attr_id": 2504,
                  "attr_value": product_data.get("brand_nk") or "–ë—Ä–µ–Ω–¥–û–¥–µ–∂–¥—ã"})

    # ‚úî –≥—Ä—É–ø–ø–∞ –¢–ù –í–≠–î (–≤—Å–µ–≥–¥–∞ 4 –∑–Ω–∞–∫–∞)
    if tnved := product_data.get("tnved"):
        attrs.append({"attr_id": 3959, "attr_value": tnved[:4]})

        # –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–¥ (–µ—Å–ª–∏ 10-–∑–Ω–∞—á–Ω—ã–π)
        if len(tnved) == 10:
            attrs.append({"attr_id": 13933, "attr_value": tnved})

    # ‚úî –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞
    if ptype := product_data.get("product_type"):
        attrs.append({"attr_id": 12, "attr_value": ptype.upper()})

    # ‚úî —Ü–≤–µ—Ç
    if color := product_data.get("color"):
        attrs.append({"attr_id": 36, "attr_value": color.upper()})

    # ‚úî —Ä–∞–∑–º–µ—Ä
    if size := product_data.get("size"):
        attrs.append({"attr_id": 35, "attr_value": size,
                      "attr_value_type": "–ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–ô"})

    # ‚úî —Å–æ—Å—Ç–∞–≤
    if comp := product_data.get("composition"):
        attrs.append({"attr_id": 2483, "attr_value": comp})

    # ‚úî —Ä–µ–≥–ª–∞–º–µ–Ω—Ç
    attrs.append({"attr_id": 13836,
                  "attr_value": "–¢–† –¢–° 017/2011 \"–û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ª–µ–≥–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏\""})

    # ‚úî –∞—Ä—Ç–∏–∫—É–ª
    if art := product_data.get("article"):
        attrs.append({"attr_id": 13914,
                      "attr_value": art,
                      "attr_value_type": "–ê—Ä—Ç–∏–∫—É–ª"})

    # ‚úî –ø–æ–ª
    if gender := determine_gender(product_data):
        attrs.append({"attr_id": 14013, "attr_value": gender})

    # ‚úî —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    if docs := product_data.get("permit_docs"):
        attrs.append({"attr_id": 23557, "attr_value": docs})

    card["good_attrs"] = attrs
    return card


# ---------------------------------------------------------------------------
# üîç  –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ---------------------------------------------------------------------------

def determine_gender(product_data: dict) -> str | None:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º —Ç–æ–≤–∞—Ä–∞"""
    name = product_data.get("name", "").lower()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç "–¶–µ–ª–µ–≤–æ–π –ø–æ–ª" –∏–∑ –ú–æ–π–°–∫–ª–∞–¥
    target_gender = product_data.get("target_gender", "").lower()
    
    if target_gender:
        if "–∂–µ–Ω—Å–∫" in target_gender or "women" in target_gender or "female" in target_gender:
            return "–ñ–ï–ù–°–ö–ò–ô"
        elif "–º—É–∂—Å–∫" in target_gender or "men" in target_gender or "male" in target_gender:
            return "–ú–£–ñ–°–ö–û–ô"
        elif "–¥–µ—Ç—Å–∫" in target_gender or "kid" in target_gender or "child" in target_gender:
            return "–ë–ï–ó –£–ö–ê–ó–ê–ù–ò–Ø –ü–û–õ–ê"  # –î–ª—è –¥–µ—Ç—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        elif "—É–Ω–∏—Å–µ–∫—Å" in target_gender or "—É–Ω–∏–≤–µ—Ä—Å–∞–ª" in target_gender:
            return "–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô (–£–ù–ò–°–ï–ö–°)"
    
    # –ï—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if any(w in name for w in ("–º—É–∂—Å–∫", "men", "male")):
        return "–ú–£–ñ–°–ö–û–ô"
    if any(w in name for w in ("–∂–µ–Ω—Å–∫", "women", "female")):
        return "–ñ–ï–ù–°–ö–ò–ô"
    if any(w in name for w in ("–¥–µ—Ç—Å–∫", "kid", "child")):
        return "–ë–ï–ó –£–ö–ê–ó–ê–ù–ò–Ø –ü–û–õ–ê"
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô (–£–ù–ò–°–ï–ö–°) –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ –£–ù–ò–°–ï–ö–°
    return "–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô (–£–ù–ò–°–ï–ö–°)" if name else None


# ---------------------------------------------------------------------------
# üöö  –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
# ---------------------------------------------------------------------------

def send_card_to_nk(card_data: dict) -> dict:
    """POST /v3/feed"""
    try:
        resp = requests.post(
            f"{BASE_URL}/v3/feed",
            params={"apikey": NC_API_KEY},
            headers={"Content-Type": "application/json; charset=utf-8"},
            json=card_data,
            timeout=30
        )

        if resp.status_code == 200:
            data = resp.json()
            print("\n‚úÖ  –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            result = data.get("result")

            if not result:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å feed_id. –û—Ç–≤–µ—Ç:", data)
                return {"success": False, "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç result –≤ –æ—Ç–≤–µ—Ç–µ", "raw": data}

            feed_id = result.get("feed_id")
            if not feed_id:
                print("‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç feed_id. –û—Ç–≤–µ—Ç:", data)
                return {"success": False, "error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç feed_id –≤ –æ—Ç–≤–µ—Ç–µ", "raw": data}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
            status_info = check_feed_status(feed_id)
            return format_status_response(status_info)

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {resp.status_code}")
            return {"success": False, "error": f"HTTP {resp.status_code}: {resp.text}", "status_code": resp.status_code}

    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        return {"success": False, "error": str(e)}
            


def check_feed_status(feed_id: str) -> dict:
    """GET /v3/feed-status —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        resp = requests.get(
            f"{BASE_URL}/v3/feed-status",
            params={"apikey": NC_API_KEY, "feed_id": feed_id},
            timeout=30
        )
        
        if resp.status_code == 200:
            data = resp.json()
            result = data.get("result", {})
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            feed_info = {
                "success": True,
                "feed_id": feed_id,
                "status": result.get("status", "Unknown"),
                "created_at": result.get("created_at", ""),
                "updated_at": result.get("updated_at", ""),
                "items_count": result.get("items_count", 0),
                "items_processed": result.get("items_processed", 0),
                "items_accepted": result.get("items_accepted", 0),
                "items_rejected": result.get("items_rejected", 0),
                "errors": result.get("errors", []),
                "warnings": result.get("warnings", []),
                "raw_data": result  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            }
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏
            if feed_info["items_rejected"] > 0 or feed_info["status"] == "Rejected":
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö
                feed_details = get_feed_details(feed_id)
                if feed_details:
                    feed_info["detailed_errors"] = feed_details.get("errors", [])
                    feed_info["validation_errors"] = feed_details.get("validation_errors", [])
                    feed_info["items"] = feed_details.get("items", [])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if feed_info["errors"]:
                feed_info["formatted_errors"] = format_errors(feed_info["errors"])
            
            return feed_info
            
        return {
            "success": False, 
            "error": f"HTTP {resp.status_code}: {resp.text}", 
            "status_code": resp.status_code
        }
        
    except Exception as e:
        return {"success": False, "error": str(e)}


def get_feed_details(feed_id: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–¥–µ"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        resp = requests.get(
            f"{BASE_URL}/v3/feed-details",
            params={"apikey": NC_API_KEY, "feed_id": feed_id},
            timeout=30
        )
        
        if resp.status_code == 200:
            return resp.json().get("result", {})
    except:
        pass
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ —Ñ–∏–¥–æ–≤
    try:
        resp = requests.get(
            f"{BASE_URL}/v3/feeds",
            params={"apikey": NC_API_KEY, "feed_id": feed_id},
            timeout=30
        )
        
        if resp.status_code == 200:
            feeds = resp.json().get("result", [])
            for feed in feeds:
                if str(feed.get("feed_id")) == str(feed_id):
                    return feed
    except:
        pass
    
    return {}


def format_errors(errors: list) -> list:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    formatted = []
    
    for error in errors:
        if isinstance(error, dict):
            formatted_error = {
                "field": error.get("field", "Unknown"),
                "message": error.get("message", error.get("error", "Unknown error")),
                "code": error.get("code", ""),
                "value": error.get("value", "")
            }
            
            # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏
            if "attr_id" in error:
                formatted_error["attr_id"] = error["attr_id"]
                formatted_error["attr_name"] = get_attr_name(error["attr_id"])
            
            formatted.append(formatted_error)
        else:
            formatted.append({"message": str(error)})
    
    return formatted


@cache
def get_attr_name(attr_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ –ø–æ ID"""
    attr_names = {
        2630: "–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞",
        2478: "–ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
        2504: "–¢–æ–≤–∞—Ä–Ω—ã–π –∑–Ω–∞–∫",
        3959: "–ì—Ä—É–ø–ø–∞ –¢–ù –í–≠–î",
        13933: "–î–µ—Ç–∞–ª—å–Ω—ã–π –¢–ù –í–≠–î",
        12: "–í–∏–¥ —Ç–æ–≤–∞—Ä–∞",
        36: "–¶–≤–µ—Ç",
        35: "–†–∞–∑–º–µ—Ä",
        2483: "–°–æ—Å—Ç–∞–≤",
        13836: "–†–µ–≥–ª–∞–º–µ–Ω—Ç",
        13914: "–ê—Ä—Ç–∏–∫—É–ª",
        14013: "–ü–æ–ª",
        23557: "–†–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
    }
    return attr_names.get(attr_id, f"–ê—Ç—Ä–∏–±—É—Ç {attr_id}")


# –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
def format_status_response(feed_info: dict) -> dict:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI –∏ –ª–æ–≥–∏—Ä—É–µ—Ç GTIN"""
    response = {
        "success": feed_info.get("success", False),
        "feed_id": feed_info.get("feed_id"),
        "status": feed_info.get("status", "Unknown"),
        "created_at": feed_info.get("created_at"),
        "stats": {
            "total": feed_info.get("items_count", 0),
            "processed": feed_info.get("items_processed", 0),
            "accepted": feed_info.get("items_accepted", 0),
            "rejected": feed_info.get("items_rejected", 0)
        }
    }

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º GTIN, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
    items = feed_info.get("raw_data", {}).get("item")
    if isinstance(items, list):
        for item in items:
            gtin = item.get("gtin")
            if gtin:
                response["gtin"] = gtin
                print(f"‚úÖ GTIN –ø–æ–ª—É—á–µ–Ω: {gtin}")
                break  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π GTIN

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏
    if feed_info.get("formatted_errors"):
        response["errors"] = feed_info["formatted_errors"]
    elif feed_info.get("errors"):
        response["errors"] = [{"message": str(e)} for e in feed_info["errors"]]

    # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
    if feed_info.get("validation_errors"):
        response["validation_errors"] = feed_info["validation_errors"]

    # –û—à–∏–±–æ—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    if feed_info.get("items"):
        error_items = [item for item in feed_info["items"] if item.get("status") == "rejected"]
        if error_items:
            response["error_items"] = error_items

    response["raw_response"] = feed_info.get("raw_data", {})
    return response



# ---------------------------------------------------------------------------
# üßê  –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø–æ–¥—Å–∫–∞–∑–∫–∏)
# ---------------------------------------------------------------------------

def find_similar_values(value: str, preset: Set[str], threshold: float = 0.6) -> List[str]:
    if not value or not preset:
        return []

    val_low = value.lower()
    similars = [p for p in preset if val_low in p.lower() or p.lower() in val_low]
    return sorted(similars)[:5]  # –º–∞–∫—Å–∏–º—É–º 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
