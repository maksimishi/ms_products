"""
API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º
"""
import os
from functools import cache
from typing import Tuple, Set, List, Dict
from category_mapper import choose_category
import requests
from dotenv import load_dotenv

from config import DEFAULT_NK_CATEGORY

load_dotenv()

NC_API_KEY = os.getenv("NC_API_KEY")
BASE_URL = "https://–∞–ø–∏.–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π-–∫–∞—Ç–∞–ª–æ–≥.—Ä—Ñ"
USE_LOCAL_MAPPING_FIRST = True

# ---------------------------------------------------------------------------
# üîó  –ó–∞–ø—Ä–æ—Å—ã –∫ API
# ---------------------------------------------------------------------------

def _req(path: str, **params):
    """–ë–∞–∑–æ–≤—ã–π GET-–∑–∞–ø—Ä–æ—Å –∫ API –Ω–∞—Ü. –∫–∞—Ç–∞–ª–æ–≥–∞"""
    params.setdefault("apikey", NC_API_KEY)

    try:
        resp = requests.get(f"{BASE_URL}{path}", params=params, timeout=30)
        resp.raise_for_status()
        return resp.json().get("result")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå  –û—à–∏–±–∫–∞ API –Ω–∞—Ü. –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
    except (KeyError, ValueError) as e:
        print(f"‚ùå  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {e}")

    return None


# ---------------------------------------------------------------------------
# üìã  –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
# ---------------------------------------------------------------------------

@cache
def get_color_preset() -> Set[str]:
    """–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ü–≤–µ—Ç–æ–≤ (attr_id 36) –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"""
    try:
        attrs = _req("/v3/attributes", cat_id=30933, attr_type="a") or []
        color_attr = next((a for a in attrs if a["attr_id"] == 36), None)
        if not color_attr:
            return set()

        if color_attr.get("attr_preset"):
            return {v.upper() for v in color_attr["attr_preset"]}
        if color_attr.get("preset_url"):
            preset = _req(color_attr["preset_url"]) or []
            return {v.upper() for v in preset}

    except Exception as e:
        print(f"‚ùå  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ —Ü–≤–µ—Ç–æ–≤: {e}")

    return set()


@cache
def get_kind_preset(cat_id: int) -> Set[str]:
    """–ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö ¬´–≤–∏–¥–æ–≤ —Ç–æ–≤–∞—Ä–∞¬ª (attr_id 12) –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"""
    try:
        attrs = _req("/v3/attributes", cat_id=cat_id, attr_type="a") or []
        kind_attr = next((a for a in attrs if a["attr_id"] == 12), None)
        if not kind_attr:
            return set()

        if kind_attr.get("attr_preset"):
            return {v.upper() for v in kind_attr["attr_preset"]}
        if kind_attr.get("preset_url"):
            preset = _req(kind_attr["preset_url"]) or []
            return {v.upper() for v in preset}

    except Exception as e:
        print(f"‚ùå  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_id}: {e}")

    return set()


@cache
def get_categories_by_tnved(tnved: str) -> List[Dict]:
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–¥ –¢–ù –í–≠–î"""
    try:
        print(f"\nüîç  –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¢–ù –í–≠–î {tnved}")
        # –µ—Å–ª–∏ –∫–æ–¥ 10-–∑–Ω–∞—á–Ω—ã–π ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ –≥—Ä—É–ø–ø–µ (–ø–µ—Ä–≤—ã–µ 4 —Ü–∏—Ñ—Ä—ã)
        if len(tnved) == 10:
            group_code = tnved[:4]
            cats = _req("/v3/categories", tnved=group_code) or []
            if cats:
                print(f"  ‚úÖ  –ù–∞—à–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≥—Ä—É–ø–ø–µ {group_code}")
                return cats

        cats = _req("/v3/categories", tnved=tnved) or []
        if cats:
            print("  ‚úÖ  –ù–∞—à–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –∫–æ–¥—É")
        else:
            print("  ‚ùå  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        return cats
    except Exception as e:
        print(f"‚ùå  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¢–ù –í–≠–î {tnved}: {e}")
        return []


@cache
def get_category_by_id(cat_id: int) -> Dict:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        cats = _req("/v3/categories", cat_id=cat_id) or []
        return cats[0] if cats else {}
    except Exception as e:
        print(f"‚ùå  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_id}: {e}")
        return {}


# ---------------------------------------------------------------------------
# üóÇÔ∏è  –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# ---------------------------------------------------------------------------

PRIORITY_CATEGORIES = [30933, 30717]  # –æ–¥–µ–∂–¥–∞, –æ–±—É–≤—å


def determine_category_by_product_type(tnved: str, product_type: str) -> int:
    """
    –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π JSON (choose_category), –∑–∞—Ç–µ–º ‚Äì —Å—Ç–∞—Ä—É—é API-–ª–æ–≥–∏–∫—É.
    """
    if USE_LOCAL_MAPPING_FIRST:
        cid = choose_category(tnved, product_type)
        if cid:
            return cid

    # ‚Üì —Å—Ç–∞—Ä—ã–π API-–±–ª–æ–∫ –æ—Å—Ç–∞–≤—å—Ç–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–ª–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
    return determine_category_for_tnved(tnved)


def determine_category_for_tnved(tnved: str) -> int:
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–ª—å–∫–æ –ø–æ –¢–ù –í–≠–î (–µ—Å–ª–∏ –≤–∏–¥ –Ω–µ –ø–æ–º–æ–≥)"""

    if USE_LOCAL_MAPPING_FIRST:
        cid = choose_category(tnved, None)
        if cid:
            return cid
    if not tnved:
        return DEFAULT_NK_CATEGORY

    cats = get_categories_by_tnved(tnved)
    if not cats:
        return DEFAULT_NK_CATEGORY

    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ
    for cat in cats:
        if cat["cat_id"] in PRIORITY_CATEGORIES and cat.get("category_active", True):
            return cat["cat_id"]

    # –ø–æ—Ç–æ–º –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è
    for cat in cats:
        if cat.get("category_active", True):
            return cat["cat_id"]

    # –∏–Ω–∞—á–µ –ø–µ—Ä–≤–∞—è –≤ —Å–ø–∏—Å–∫–µ
    return cats[0]["cat_id"]


# ---------------------------------------------------------------------------
# ‚úÖ  –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
# ---------------------------------------------------------------------------

def validate_color(color_value: str) -> Tuple[bool, Set[str]]:
    if not color_value:
        return False, set()
    preset = get_color_preset()
    val = color_value.upper()
    return val in preset, preset


def validate_product_kind(kind_value: str, cat_id: int) -> Tuple[bool, Set[str]]:
    if not kind_value or not cat_id:
        return False, set()
    preset = get_kind_preset(cat_id)
    val = kind_value.upper()
    return val in preset, preset


# ---------------------------------------------------------------------------
# üì¶  –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
# ---------------------------------------------------------------------------

def create_card_data(product_data: dict, cat_id: int | None = None) -> dict:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏:
      1) –¢–ù –í–≠–î + –≤–∏–¥
      2) —Ç–æ–ª—å–∫–æ –¢–ù –í–≠–î
      3) —Ç–æ–ª—å–∫–æ –≤–∏–¥
      4) –¥–µ—Ñ–æ–ª—Ç
    """
    if cat_id is None:
        tnved = (product_data.get("tnved") or "").strip()
        ptype = (product_data.get("product_type") or "").strip()

        if tnved and ptype:
            cat_id = determine_category_by_product_type(tnved, ptype)

        if not cat_id and tnved:
            cat_id = determine_category_for_tnved(tnved)

        if not cat_id and ptype:
            cat_id = determine_category_by_product_type("", ptype)

        if not cat_id:
            cat_id = DEFAULT_NK_CATEGORY
            print(f"  ‚û°Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é {cat_id}")

    # --- –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ ---------------------------------
    card: Dict = {
        "is_tech_gtin": True,          # —Ç–µ—Ö. GTIN (029‚Ä¶)
        "tnved": product_data.get("tnved", ""),
        "brand": product_data.get("brand_nk") or "–ë—Ä–µ–Ω–¥–û–¥–µ–∂–¥—ã",
        "good_name": product_data.get("name", ""),
        "moderation": 0,               # 0 ‚Äî —á–µ—Ä–Ω–æ–≤–∏–∫
        "categories": [cat_id],
        "good_attrs": []
    }

    attrs: List[Dict] = []

    # ‚úî —Å—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    attrs.append({"attr_id": 2630, "attr_value": "RU"})

    # ‚úî –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    attrs.append({"attr_id": 2478, "attr_value": product_data.get("name", "")})

    # ‚úî —Ç–æ–≤–∞—Ä–Ω—ã–π –∑–Ω–∞–∫
    attrs.append({"attr_id": 2504,
                  "attr_value": product_data.get("brand_nk") or "–ë—Ä–µ–Ω–¥–û–¥–µ–∂–¥—ã"})

    # ‚úî –≥—Ä—É–ø–ø–∞ –¢–ù –í–≠–î
    if tnved := product_data.get("tnved"):
        attrs.append({"attr_id": 3959, "attr_value": tnved[:4]})

        # –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–¥ (–µ—Å–ª–∏ 10-–∑–Ω–∞—á–Ω—ã–π)
        if len(tnved) == 10:
            attrs.append({"attr_id": 13933, "attr_value": tnved})

    # ‚úî –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞
    if ptype := product_data.get("product_type"):
        attrs.append({"attr_id": 12, "attr_value": ptype.upper()})

    # ‚úî —Ü–≤–µ—Ç
    if color := product_data.get("color"):
        attrs.append({"attr_id": 36, "attr_value": color.upper()})

    # ‚úî —Ä–∞–∑–º–µ—Ä
    if size := product_data.get("size"):
        attrs.append({"attr_id": 35, "attr_value": size,
                      "attr_value_type": "–ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–ô"})

    # ‚úî —Å–æ—Å—Ç–∞–≤
    if comp := product_data.get("composition"):
        attrs.append({"attr_id": 2483, "attr_value": comp})

    # ‚úî —Ä–µ–≥–ª–∞–º–µ–Ω—Ç
    attrs.append({"attr_id": 13836,
                  "attr_value": "–¢–† –¢–° 017/2011 \"–û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ª–µ–≥–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏\""})

    # ‚úî –∞—Ä—Ç–∏–∫—É–ª
    if art := product_data.get("article"):
        attrs.append({"attr_id": 13914,
                      "attr_value": art,
                      "attr_value_type": "–ê—Ä—Ç–∏–∫—É–ª"})

    # ‚úî –ø–æ–ª
    if gender := determine_gender(product_data):
        attrs.append({"attr_id": 14013, "attr_value": gender})

    # ‚úî —Ä–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    if docs := product_data.get("permit_docs"):
        attrs.append({"attr_id": 23557, "attr_value": docs})

    card["good_attrs"] = attrs
    return card


# ---------------------------------------------------------------------------
# üîç  –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ---------------------------------------------------------------------------

def determine_gender(product_data: dict) -> str | None:
    """–ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    name = product_data.get("name", "").lower()
    if any(w in name for w in ("–º—É–∂—Å–∫", "men", "male")):
        return "–ú–£–ñ–°–ö–û–ô"
    if any(w in name for w in ("–∂–µ–Ω—Å–∫", "women", "female")):
        return "–ñ–ï–ù–°–ö–ò–ô"
    if any(w in name for w in ("–¥–µ—Ç—Å–∫", "kid", "child")):
        return "–î–ï–¢–°–ö–ò–ô"
    return "–£–ù–ò–°–ï–ö–°" if name else None


# ---------------------------------------------------------------------------
# üöö  –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
# ---------------------------------------------------------------------------

def send_card_to_nk(card_data: dict) -> dict:
    """POST /v3/feed"""
    try:
        resp = requests.post(
            f"{BASE_URL}/v3/feed",
            params={"apikey": NC_API_KEY},
            headers={"Content-Type": "application/json; charset=utf-8"},
            json=card_data,
            timeout=30
        )
        if resp.status_code == 200:
            feed_id = resp.json().get("result", {}).get("feed_id")
            print("‚úÖ  –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return {"success": True, "feed_id": feed_id, "response": resp.json()}
        print(f"‚ùå  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ({resp.status_code}): {resp.text}")
        return {"success": False, "error": resp.text, "status_code": resp.status_code}
    except Exception as e:
        print(f"‚ùå  –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return {"success": False, "error": str(e)}


def check_feed_status(feed_id: str) -> dict:
    """GET /v3/feed-status"""
    try:
        resp = requests.get(
            f"{BASE_URL}/v3/feed-status",
            params={"apikey": NC_API_KEY, "feed_id": feed_id},
            timeout=30
        )
        if resp.status_code == 200:
            return {"success": True, "data": resp.json()}
        return {"success": False, "error": resp.text, "status_code": resp.status_code}
    except Exception as e:
        return {"success": False, "error": str(e)}


# ---------------------------------------------------------------------------
# üßê  –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø–æ–¥—Å–∫–∞–∑–∫–∏)
# ---------------------------------------------------------------------------

def find_similar_values(value: str, preset: Set[str], threshold: float = 0.6) -> List[str]:
    if not value or not preset:
        return []

    val_low = value.lower()
    similars = [p for p in preset if val_low in p.lower() or p.lower() in val_low]
    return sorted(similars)[:5]  # –º–∞–∫—Å–∏–º—É–º 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
