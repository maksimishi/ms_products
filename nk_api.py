"""
API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º
"""
import os
import requests
from functools import cache
from dotenv import load_dotenv
from config import DEFAULT_NK_CATEGORY

load_dotenv()

NC_API_KEY = os.getenv("NC_API_KEY")
BASE_URL = "https://–∞–ø–∏.–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π-–∫–∞—Ç–∞–ª–æ–≥.—Ä—Ñ"

def _req(path, **params):
    """–ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API –Ω–∞—Ü.–∫–∞—Ç–∞–ª–æ–≥–∞"""
    params.setdefault("apikey", NC_API_KEY)
    try:
        response = requests.get(f"{BASE_URL}{path}", params=params, timeout=30)
        response.raise_for_status()
        return response.json()["result"]
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ API –Ω–∞—Ü.–∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return None
    except KeyError as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ API: {e}")
        return None

@cache
def get_color_preset() -> set:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∏–∑ –Ω–∞—Ü.–∫–∞—Ç–∞–ª–æ–≥–∞ (attr_id 36)"""
    try:
        attrs = _req("/v3/attributes", cat_id=30933, attr_type="a")
        if not attrs:
            return set()
        
        # –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç —Ü–≤–µ—Ç–∞ (attr_id 36)
        color_attr = next((a for a in attrs if a["attr_id"] == 36), None)
        if not color_attr:
            return set()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Å–µ—Ç
        if color_attr.get("attr_preset"):
            return set(color_attr["attr_preset"])
        elif color_attr.get("preset_url"):
            preset = _req(color_attr["preset_url"])
            return set(preset) if preset else set()
        
        return set()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤: {e}")
        return set()

@cache
def get_kind_preset(cat_id: int) -> set:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤–∏–¥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (attr_id 12)"""
    try:
        attrs = _req("/v3/attributes", cat_id=cat_id, attr_type="a")
        if not attrs:
            return set()
        
        # –ò—â–µ–º –∞—Ç—Ä–∏–±—É—Ç –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞ (attr_id 12)
        kind_attr = next((a for a in attrs if a["attr_id"] == 12), None)
        if not kind_attr:
            return set()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Å–µ—Ç
        if kind_attr.get("attr_preset"):
            return set(kind_attr["attr_preset"])
        elif kind_attr.get("preset_url"):
            preset = _req(kind_attr["preset_url"])
            return set(preset) if preset else set()
        
        return set()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_id}: {e}")
        return set()

@cache
def get_categories_by_tnved(tnved: str) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¢–ù –í–≠–î –∫–æ–¥—É"""
    try:
        print(f"\nüîç –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¢–ù –í–≠–î {tnved}")
        # –ï—Å–ª–∏ –¢–ù –í–≠–î 10-–∑–Ω–∞—á–Ω—ã–π, –ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ –≥—Ä—É–ø–ø–µ (–ø–µ—Ä–≤—ã–µ 4 —Ü–∏—Ñ—Ä—ã)
        if len(tnved) == 10:
            tnved_group = tnved[:4]
            print(f"–ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–æ –≥—Ä—É–ø–ø–µ –¢–ù –í–≠–î: {tnved_group}")
            categories = _req("/v3/categories", tnved=tnved_group)
            if categories:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≥—Ä—É–ø–ø–µ –¢–ù –í–≠–î {tnved_group}")
                return categories
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –¢–ù –í–≠–î –Ω–µ 10-–∑–Ω–∞—á–Ω—ã–π, –ø—Ä–æ–±—É–µ–º –ø–æ –ø–æ–ª–Ω–æ–º—É –∫–æ–¥—É
        categories = _req("/v3/categories", tnved=tnved)
        if categories:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¢–ù –í–≠–î {tnved}")
            return categories
        
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¢–ù –í–≠–î {tnved}")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –¢–ù –í–≠–î {tnved}: {e}")
        return []

@cache  
def get_category_by_id(cat_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID"""
    try:
        categories = _req("/v3/categories", cat_id=cat_id)
        if categories and len(categories) > 0:
            return categories[0]
        return {}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_id}: {e}")
        return {}

def determine_category_by_product_type(tnved: str, product_type: str) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–ù –í–≠–î –∏ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞"""
    print(f"\n=== –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¢–ù –í–≠–î {tnved} –∏ –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞ {product_type} ===")
    
    if not tnved or not product_type:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¢–ù –í–≠–î –∏–ª–∏ –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞")
        return determine_category_for_tnved(tnved)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¢–ù –í–≠–î
    categories = get_categories_by_tnved(tnved)
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –¢–ù –í–≠–î: {len(categories)}")
    for cat in categories:
        print(f"  - –ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat.get('cat_id')}: {cat.get('category_name')} (–∞–∫—Ç–∏–≤–Ω–∞: {cat.get('category_active', True)})")
    
    if not categories:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –¢–ù –í–≠–î")
        return DEFAULT_NK_CATEGORY
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ª–µ–≥–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏
    PRIORITY_CATEGORIES = [30933, 30717]  # –û–¥–µ–∂–¥–∞, –û–±—É–≤—å
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {PRIORITY_CATEGORIES}")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for cat in categories:
        cat_id = cat.get('cat_id')
        if cat_id in PRIORITY_CATEGORIES and cat.get('category_active', True):
            print(f"\n  –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é {cat_id}:")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            kind_preset = get_kind_preset(cat_id)
            print(f"  –î–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–∏–¥—ã —Ç–æ–≤–∞—Ä–æ–≤: {kind_preset}")
            if product_type.upper() in kind_preset:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è {cat_id} –¥–ª—è –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞ {product_type}")
                return cat_id
            else:
                print(f"‚ùå –í–∏–¥ —Ç–æ–≤–∞—Ä–∞ {product_type} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–µ—Å–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_id}")
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for cat in categories:
        cat_id = cat.get('cat_id')
        if not cat.get('category_active', True):
            print(f"  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é {cat_id}")
            continue
            
        print(f"\n  –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é {cat_id}:")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        kind_preset = get_kind_preset(cat_id)
        print(f"  –î–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–∏–¥—ã —Ç–æ–≤–∞—Ä–æ–≤: {kind_preset}")
        if product_type.upper() in kind_preset:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {cat_id} –¥–ª—è –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞ {product_type}")
            return cat_id
        else:
            print(f"‚ùå –í–∏–¥ —Ç–æ–≤–∞—Ä–∞ {product_type} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–µ—Å–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_id}")
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
    print(f"\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≤–∏–¥–∞ —Ç–æ–≤–∞—Ä–∞ {product_type}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É")
    return determine_category_for_tnved(tnved)

def determine_category_for_tnved(tnved: str) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¢–ù –í–≠–î"""
    if not tnved:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¢–ù –í–≠–î")
        return DEFAULT_NK_CATEGORY
    
    print(f"\n=== –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¢–ù –í–≠–î {tnved} ===")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¢–ù –í–≠–î
    categories = get_categories_by_tnved(tnved)
    if not categories:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        return DEFAULT_NK_CATEGORY
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    for cat in categories:
        print(f"  - –ö–∞—Ç–µ–≥–æ—Ä–∏—è {cat.get('cat_id')}: {cat.get('category_name')} (–∞–∫—Ç–∏–≤–Ω–∞: {cat.get('category_active', True)})")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ª–µ–≥–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏
    PRIORITY_CATEGORIES = [30933, 30717]  # –û–¥–µ–∂–¥–∞, –û–±—É–≤—å
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {PRIORITY_CATEGORIES}")
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for cat in categories:
        cat_id = cat.get('cat_id')
        if cat_id in PRIORITY_CATEGORIES and cat.get('category_active', True):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è {cat_id}")
            return cat_id
    
    # –ó–∞—Ç–µ–º –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for cat in categories:
        if cat.get('category_active', True):
            cat_id = cat.get('cat_id')
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è {cat_id}")
            return cat_id
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é
    if categories:
        cat_id = categories[0].get('cat_id')
        print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é {cat_id}")
        return cat_id
    
    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é")
    return DEFAULT_NK_CATEGORY

@cache
def get_attributes_for_category(cat_id: int, attr_type: str = "a") -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        attrs = _req("/v3/attributes", cat_id=cat_id, attr_type=attr_type)
        return attrs if attrs else []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {cat_id}: {e}")
        return []

def validate_color(color_value: str) -> tuple[bool, set]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ü–≤–µ—Ç –≤ –ø—Ä–µ—Å–µ—Ç–µ –Ω–∞—Ü.–∫–∞—Ç–∞–ª–æ–≥–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–Ω–∞–π–¥–µ–Ω_–ª–∏, —Å–ø–∏—Å–æ–∫_–≤—Å–µ—Ö_—Ü–≤–µ—Ç–æ–≤)
    """
    if not color_value:
        return False, set()
    
    preset_colors = get_color_preset()
    color_upper = color_value.upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    is_valid = color_upper in preset_colors
    
    return is_valid, preset_colors

def validate_product_kind(kind_value: str, cat_id: int) -> tuple[bool, set]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∏–¥ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–µ—Å–µ—Ç–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–Ω–∞–π–¥–µ–Ω_–ª–∏, —Å–ø–∏—Å–æ–∫_–≤—Å–µ—Ö_–≤–∏–¥–æ–≤)
    """
    if not kind_value or not cat_id:
        return False, set()
    
    preset_kinds = get_kind_preset(cat_id)
    kind_upper = kind_value.upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    is_valid = kind_upper in preset_kinds
    
    return is_valid, preset_kinds

def create_card_data(product_data: dict, cat_id: int = None) -> dict:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –ù–ö"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
    if not cat_id and product_data.get('tnved'):
        # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –≤–∏–¥—É —Ç–æ–≤–∞—Ä–∞
        if product_data.get('product_type'):
            cat_id = determine_category_by_product_type(product_data['tnved'], product_data['product_type'])
        else:
            cat_id = determine_category_for_tnved(product_data['tnved'])
    
    if not cat_id:
        cat_id = DEFAULT_NK_CATEGORY
    
    # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    card_data = {
        "is_tech_gtin": True,  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π GTIN
        "tnved": product_data.get('tnved', ''),
        "brand": product_data.get('brand_nk') or "–ë—Ä–µ–Ω–¥–û–¥–µ–∂–¥—ã",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—Ä–µ–Ω–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        "good_name": product_data.get('name', ''),
        "moderation": 0,  # 0 - —á–µ—Ä–Ω–æ–≤–∏–∫, 1 - –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        "categories": [cat_id],
        "good_attrs": []
    }
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    attrs = []
    
    # –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ (attr_id: 2630)
    attrs.append({"attr_id": 2630, "attr_value": "RU"})
    
    # –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (attr_id: 2478)
    attrs.append({"attr_id": 2478, "attr_value": product_data.get('name', '')})
    
    # –¢–æ–≤–∞—Ä–Ω—ã–π –∑–Ω–∞–∫ (attr_id: 2504)
    brand_value = product_data.get('brand_nk') or "–ë—Ä–µ–Ω–¥–û–¥–µ–∂–¥—ã"
    attrs.append({"attr_id": 2504, "attr_value": brand_value})
    
    # –ì—Ä—É–ø–ø–∞ –¢–ù –í–≠–î (attr_id: 3959)
    if product_data.get('tnved'):
        tnved_group = product_data['tnved'][:4] if len(product_data['tnved']) >= 4 else product_data['tnved']
        attrs.append({"attr_id": 3959, "attr_value": tnved_group})
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –¢–ù –í–≠–î (attr_id: 13933) –µ—Å–ª–∏ 10-–∑–Ω–∞—á–Ω—ã–π
    if product_data.get('tnved') and len(product_data['tnved']) == 10:
        attrs.append({"attr_id": 13933, "attr_value": product_data['tnved']})
    
    # –í–∏–¥ —Ç–æ–≤–∞—Ä–∞ (attr_id: 12) - –¥–ª—è –æ–¥–µ–∂–¥—ã
    if product_data.get('product_type'):
        attrs.append({"attr_id": 12, "attr_value": product_data['product_type'].upper()})
    
    # –¶–≤–µ—Ç (attr_id: 36)
    if product_data.get('color'):
        attrs.append({"attr_id": 36, "attr_value": product_data['color'].upper()})
    
    # –†–∞–∑–º–µ—Ä (attr_id: 35) 
    if product_data.get('size'):
        attrs.append({"attr_id": 35, "attr_value": product_data['size'], "attr_value_type": "–ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–ô"})
    
    # –°–æ—Å—Ç–∞–≤ (attr_id: 2483)
    if product_data.get('composition'):
        attrs.append({"attr_id": 2483, "attr_value": product_data['composition']})
    
    # –†–µ–≥–ª–∞–º–µ–Ω—Ç (attr_id: 13836) 
    attrs.append({"attr_id": 13836, "attr_value": "–¢–† –¢–° 017/2011 \"–û –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –ª–µ–≥–∫–æ–π –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏\""})
    
    # –ê—Ä—Ç–∏–∫—É–ª (attr_id: 13914)
    if product_data.get('article'):
        attrs.append({"attr_id": 13914, "attr_value": product_data['article'], "attr_value_type": "–ê—Ä—Ç–∏–∫—É–ª"})
    
    # –ü–æ–ª (attr_id: 14013) - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    gender = determine_gender(product_data)
    if gender:
        attrs.append({"attr_id": 14013, "attr_value": gender})
    
    # –†–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (attr_id: 23557)
    if product_data.get('permit_docs'):
        attrs.append({"attr_id": 23557, "attr_value": product_data['permit_docs']})
    
    card_data["good_attrs"] = attrs
    return card_data

def determine_gender(product_data: dict) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –¥—Ä—É–≥–∏–º –¥–∞–Ω–Ω—ã–º"""
    name = product_data.get('name', '').lower()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞
    if any(word in name for word in ['–º—É–∂—Å–∫', 'men', 'male']):
        return "–ú–£–ñ–°–ö–û–ô"
    elif any(word in name for word in ['–∂–µ–Ω—Å–∫', 'women', 'female']):
        return "–ñ–ï–ù–°–ö–ò–ô"
    elif any(word in name for word in ['–¥–µ—Ç—Å–∫', 'kids', 'child']):
        return "–î–ï–¢–°–ö–ò–ô"
    else:
        return "–£–ù–ò–°–ï–ö–°"

def send_card_to_nk(card_data: dict) -> dict:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥"""
    try:
        headers = {
            "Content-Type": "application/json; charset=utf-8"
        }
        params = {"apikey": NC_API_KEY}
        
        response = requests.post(
            f"{BASE_URL}/v3/feed", 
            headers=headers, 
            params=params, 
            json=card_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            return {
                'success': True,
                'feed_id': result.get('result', {}).get('feed_id'),
                'response': result
            }
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏. –ö–æ–¥: {response.status_code}")
            return {
                'success': False,
                'error': response.text,
                'status_code': response.status_code
            }
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def check_feed_status(feed_id: str) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–¥–∞"""
    try:
        params = {"apikey": NC_API_KEY, "feed_id": feed_id}
        
        response = requests.get(
            f"{BASE_URL}/v3/feed-status",
            params=params,
            timeout=30
        )
        
        if response.status_code == 200:
            return {
                'success': True,
                'data': response.json()
            }
        else:
            return {
                'success': False,
                'error': response.text,
                'status_code': response.status_code
            }
    except Exception as e:
        return {
            'success': False,
            'error': str(e)
        }

def find_similar_values(value: str, preset: set, threshold: float = 0.6) -> list:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–µ—Å–µ—Ç–µ (–¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫)
    """
    if not value or not preset:
        return []
    
    value_lower = value.lower()
    similar = []
    
    for preset_value in preset:
        preset_lower = preset_value.lower()
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
        if value_lower in preset_lower or preset_lower in value_lower:
            similar.append(preset_value)
    
    return sorted(similar)[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –ø–æ–¥—Å–∫–∞–∑–æ–∫